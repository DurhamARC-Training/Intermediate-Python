# -*- coding: utf-8 -*-
"""intermediate_python23_solutions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FcRopaAeCP3cRephlawxhi_eau97qbeZ

# Intermediate Python - solutions

## Part 1
Control flow, functions, list comprehension, conditional assignment.

### `for`, `break` and `continue`

Place a `break` statement in the `for` loop to modify **control flow** so that it prints from 0 to 7 only (including 7). Give some thought to how a `continue` statement would lead to different behaviour.
"""

for i in range(50):
    if i > 7:
        break
    print(i)

# compare with a continue statement (here the loop continues).
# We can prove this with an extra print statement.

for i in range(50):
    print("This loop is still ongoing!")
    if i > 7:
        continue
    print(i)

"""### Functions with lists

Define a **function** that takes a list of integers as an argument, squares each element in that list and returns the list:
"""

def squaring(number_list):
    squared_elements = []
    for num in number_list:
        squared_elements.append(num**2)
    return squared_elements

    
# note it would have been correct to use list comprehension here or a lambda with map()

# def squaring(number_list):
#     return [num**2 for num in number_list]

# def squaring(number_list):
#     return list(map(lambda num: num**2, number_list))

"""Initialise a list with a call to the squaring function"""

exponential_curve = squaring([1, 2, 3, 4, 5])

print(exponential_curve)

"""### Functions with variable number of arguments

Write a **function** called `print_names` that accepts a variable number of arguments. It should print the strings it receives as arguments:
"""

# Define a the function print_names() here

def print_names(*args):
    for arg in args:
        print(arg)


# Function calls to your implementation:
print_names("Python", "C++", "Java", "R")
print()
print_names("Ruby")

"""### List comprehension

Use **list comprehension** to generate a list of the first 10 multiples of five:
"""

multiples_of_five = [num * 5 for num in range(10)]
print(multiples_of_five)

"""### Conditional assignment with ternary expression

Write a **function** called `isMultipleOfFive` which determines whether the argument `n` is one of the first 10 multiples of five or not:

(*hint: use **ternary expression** with the previously created list `multiples_of_five`*)
"""

def isMultipleOfFive(n):
  return n in multiples_of_five

print(f'Is 3 multiple of 5? {isMultipleOfFive(3)}')
print(f'Is 15 multiple of 5? {isMultipleOfFive(15)}')



"""## Part 2
Lists, dictionaries, sets, tuples, lambdas, and strings.

### List slicing:

Use **slicing** to access:

    1) The last element of alphabet

    2) The last two elements of alphabet

    3) Everything but the last to elements of alphabet

    4) Every other letter of alphabet

Check you've got it right with a print statement
"""

alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']

# Q1:
print(alphabet[-1])

# Q2:
print(alphabet[-2:])

# Q3:
print(alphabet[:-2])

# Q4:
print(alphabet[::2])

"""### Lambdas

Write a **lambda** function which takes an integer as a parameter and returns the value of the integer times 11.

Assign the lambda to the variable named: f.
"""

i = 9

f = lambda num: num * 11

print(f(i))

"""Using a **filter** function and a **lambda**, extract only the animals beginning with 'A' from list *L* into *L2*"""

L = ['Kingfisher', 'Ant', 'Antelope', 'Lion']

L2 = list(filter(lambda animal: animal if animal.startswith('A') else None, L))
print(L2)

"""### Strings:

Clean the following **string** by:

    1) Correcting capitalistion

    2) removing the % symbols 

    3) replacing the double spaces with single spaces 

    4) removing the word 'GOOD' that shouldn't be there
"""

raw_string = "i aM GOOD the most inTeRESTING  sent%%%en%%ce yOu wi%%%ll ever  ReaD!"

cleaned_string = raw_string.capitalize()
cleaned_string = cleaned_string.replace('%', '')
cleaned_string = ' '.join(cleaned_string.split())
cleaned_string = cleaned_string.replace('good ', '')

print(cleaned_string)

"""Split the Haiku into separate lines (you may have to read the documentation to work out how to do this). Print each line, preceded with a line number."""

haiku = """matsushima-ya
aah matsushima-ya
matsushima-ya"""

for line_num, line in enumerate(haiku.splitlines()):
    print(f"Line {line_num}:    {line}")

"""## Part 3

### Modules

Try importing the **math** module explicitly.
"""

import math

"""Using the **math** module, calculate the area of a circle with diameter of 4cm."""

print(math.pi * 4)

"""Print 100 random numbers (module: **random**)"""

import random

for i in range(100):
    print(random.random())

"""Try iterating over all the files in a folder on your computer (module: **os**); print content of files that have a `.txt` extension."""

import os

for file in os.listdir():
    print(file)

"""Assume an x axis of range 0 to 10 with intervals of size 0.1; print the cosine of each point on the x axis."""

import math

x_axis = [x * 0.1 for x in range(0, 100)]
for x in x_axis:
    print(math.cos(x))

"""### Data structures

Using the **dict** below:

    1) Print the number of students enrolled in Biology
    2) Print the names of courses where more than 80 students are enrolled
"""

# A mapping of subject to number of students enrolled
subject_dict = {
    'Geography': 73,
    'History': 60,
    'Biology': 115,
    'chemistry': 100,
}

print(subject_dict['Biology'])

for subject, num_students in subject_dict.items():
    if num_students > 80:
        print(subject)

"""Add a start_date field to our namedtuple so the code below runs"""

from collections import namedtuple

NINumber = namedtuple('national_insurance_number', 'name start_date NI')
employee_data = NINumber('Simon', 'October 1992', '12345678')
print(f'Employee {employee_data.name} ({employee_data.start_date}) has NI: {employee_data.NI}')

"""### Classes

Add an `__init__()` function to the class below that initialises this class with a bus number plate and a mileage:
"""

class Bus:
    
    def __init__(self, bus_number, mileage):
        self.bus_number = bus_number
        self.mileage = mileage
    
    def get_bus_number(self):
        return self.bus_number
    
    def change_route(self, new_bus_number):
        self.bus_number = new_bus_number
        
bus_1 = Bus(bus_number=337, mileage=83000)
bus_2 = Bus(bus_number=493, mileage=40000)

print(bus_1.get_bus_number())

"""Add a member function to the above class, Bus, that can change the bus_number. You will need to rerun the cell above once you have made changes."""

bus_1.change_route(533)

print(bus_1.get_bus_number())